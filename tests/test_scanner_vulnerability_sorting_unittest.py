"""Test vulnerability sorting in scanner.py using unittest."""

import json
import unittest
from datetime import datetime
from unittest.mock import Mock, patch

from luminaut import models
from luminaut.scanner import Scanner


class TestScannerVulnerabilitySorting(unittest.TestCase):
    """Test vulnerability sorting in scanner.py."""

    def setUp(self):
        """Set up test fixtures."""
        self.mock_config = Mock()
        self.mock_config.shodan.api_key = "test_api_key"
        
        self.mock_shodan_response = {
            "data": [
                {
                    "timestamp": "2024-01-01T12:00:00.000000",
                    "port": 80,
                    "transport": "tcp",
                    "product": "Apache httpd",
                    "vulns": {
                        # KEV vulnerability with high CVSS
                        "CVE-2021-44228": {
                            "cvss": 10.0,
                            "summary": "Log4j RCE vulnerability"
                        },
                        # Non-KEV vulnerability with higher CVSS than next KEV
                        "CVE-2022-26134": {
                            "cvss": 9.8,
                            "summary": "Confluence RCE vulnerability"
                        },
                        # KEV vulnerability with lower CVSS
                        "CVE-2017-0144": {
                            "cvss": 8.1,
                            "summary": "EternalBlue SMB vulnerability"
                        },
                        # Non-KEV vulnerability with lower CVSS
                        "CVE-2023-12345": {
                            "cvss": 7.5,
                            "summary": "Some other vulnerability"
                        }
                    }
                }
            ],
            "domains": [],
            "last_update": "2024-01-01T12:00:00.000000"
        }
        
        self.mock_kev_data = {
            "title": "CISA Catalog of Known Exploited Vulnerabilities",
            "catalogVersion": "2025.08.05",
            "dateReleased": "2025-08-05T18:03:16.7522Z",
            "count": 2,
            "vulnerabilities": [
                {
                    "cveID": "CVE-2021-44228",
                    "vendorProject": "Apache",
                    "product": "Log4j",
                    "vulnerabilityName": "Apache Log4j2 Remote Code Execution Vulnerability",
                    "dateAdded": "2021-12-13",
                    "shortDescription": "Apache Log4j2 contains an uncontrolled recursion vulnerability.",
                    "requiredAction": "Apply updates per vendor instructions.",
                    "dueDate": "2021-12-24",
                    "knownRansomwareCampaignUse": "Known",
                    "notes": "",
                    "cwes": ["CWE-20", "CWE-400", "CWE-502"]
                },
                {
                    "cveID": "CVE-2017-0144",
                    "vendorProject": "Microsoft",
                    "product": "Windows",
                    "vulnerabilityName": "Microsoft Windows SMB Remote Code Execution Vulnerability",
                    "dateAdded": "2017-05-12",
                    "shortDescription": "Microsoft Windows contains an uncontrolled memory allocation vulnerability.",
                    "requiredAction": "Apply updates per vendor instructions.",
                    "dueDate": "2017-05-26",
                    "knownRansomwareCampaignUse": "Known",
                    "notes": "",
                    "cwes": ["CWE-119"]
                }
            ]
        }

    def test_shodan_vulnerabilities_sorted_by_kev_and_cvss(self):
        """Test that vulnerabilities are sorted by KEV status first, then CVSS score."""
        scanner = Scanner(config=self.mock_config)
        
        # Mock the KEV data loading
        with patch('luminaut.models.urlopen') as mock_urlopen:
            mock_response = Mock()
            mock_response.read.return_value = json.dumps(self.mock_kev_data).encode()
            mock_urlopen.return_value.__enter__ = Mock(return_value=mock_response)
            mock_urlopen.return_value.__exit__ = Mock(return_value=None)
            
            # Mock the Shodan client
            with patch('shodan.Shodan') as mock_shodan_class:
                mock_shodan_client = Mock()
                mock_shodan_client.host.return_value = self.mock_shodan_response
                mock_shodan_class.return_value = mock_shodan_client
                
                # Clear KEV cache to ensure fresh load
                models.KEVChecker._kev_cves = None
                
                # Execute the scanner
                result = scanner.shodan("192.168.1.1")
                
                # Should have one service with vulnerabilities
                self.assertEqual(len(result.services), 1)
                service = result.services[0]
                self.assertIsInstance(service, models.ShodanService)
                
                # Check that vulnerabilities are sorted correctly
                vulns = service.opt_vulnerabilities
                self.assertEqual(len(vulns), 4)
                
                # Expected order: KEV vulnerabilities first (sorted by CVSS desc), then non-KEV (sorted by CVSS desc)
                # KEV: CVE-2021-44228 (10.0), CVE-2017-0144 (8.1)
                # Non-KEV: CVE-2022-26134 (9.8), CVE-2023-12345 (7.5)
                expected_order = [
                    ("CVE-2021-44228", 10.0, True),   # KEV, highest CVSS
                    ("CVE-2017-0144", 8.1, True),    # KEV, lower CVSS
                    ("CVE-2022-26134", 9.8, False),  # Non-KEV, highest CVSS
                    ("CVE-2023-12345", 7.5, False)   # Non-KEV, lowest CVSS
                ]
                
                for i, (expected_cve, expected_cvss, expected_kev) in enumerate(expected_order):
                    actual_vuln = vulns[i]
                    self.assertEqual(actual_vuln.cve, expected_cve)
                    self.assertEqual(actual_vuln.cvss, expected_cvss)
                    self.assertEqual(actual_vuln.is_kev, expected_kev)

    def test_shodan_vulnerabilities_sorted_when_kev_unavailable(self):
        """Test that vulnerabilities are sorted by CVSS when KEV data is unavailable."""
        scanner = Scanner(config=self.mock_config)
        
        # Mock KEV data loading failure
        with patch('luminaut.models.urlopen') as mock_urlopen:
            from urllib.error import URLError
            mock_urlopen.side_effect = URLError("Network error")
            
            # Mock the Shodan client
            with patch('shodan.Shodan') as mock_shodan_class:
                mock_shodan_client = Mock()
                mock_shodan_client.host.return_value = self.mock_shodan_response
                mock_shodan_class.return_value = mock_shodan_client
                
                # Clear KEV cache to ensure fresh load attempt
                models.KEVChecker._kev_cves = None
                
                # Execute the scanner
                result = scanner.shodan("192.168.1.1")
                
                # Should have one service with vulnerabilities
                self.assertEqual(len(result.services), 1)
                service = result.services[0]
                
                # Check that vulnerabilities are sorted by CVSS score (all non-KEV)
                vulns = service.opt_vulnerabilities
                self.assertEqual(len(vulns), 4)
                
                # All should be non-KEV due to failed load
                for vuln in vulns:
                    self.assertFalse(vuln.is_kev)
                
                # Should be sorted by CVSS score descending
                expected_order = [
                    ("CVE-2021-44228", 10.0),
                    ("CVE-2022-26134", 9.8),
                    ("CVE-2017-0144", 8.1),
                    ("CVE-2023-12345", 7.5)
                ]
                
                for i, (expected_cve, expected_cvss) in enumerate(expected_order):
                    actual_vuln = vulns[i]
                    self.assertEqual(actual_vuln.cve, expected_cve)
                    self.assertEqual(actual_vuln.cvss, expected_cvss)

    def test_shodan_no_vulnerabilities(self):
        """Test scanner behavior when no vulnerabilities are found."""
        scanner = Scanner(config=self.mock_config)
        
        mock_response = {
            "data": [
                {
                    "timestamp": "2024-01-01T12:00:00.000000",
                    "port": 80,
                    "transport": "tcp",
                    "product": "Apache httpd"
                    # No vulns key
                }
            ],
            "domains": [],
            "last_update": "2024-01-01T12:00:00.000000"
        }
        
        with patch('shodan.Shodan') as mock_shodan_class:
            mock_shodan_client = Mock()
            mock_shodan_client.host.return_value = mock_response
            mock_shodan_class.return_value = mock_shodan_client
            
            result = scanner.shodan("192.168.1.1")
            
            # Should have one service with no vulnerabilities
            self.assertEqual(len(result.services), 1)
            service = result.services[0]
            self.assertEqual(len(service.opt_vulnerabilities), 0)

    def test_shodan_missing_api_key(self):
        """Test scanner behavior when API key is missing."""
        self.mock_config.shodan.api_key = None
        scanner = Scanner(config=self.mock_config)
        
        result = scanner.shodan("192.168.1.1")
        
        # Should return empty findings
        self.assertEqual(len(result.services), 0)
        self.assertEqual(len(result.resources), 0)


if __name__ == '__main__':
    unittest.main()